{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS Multi-AZ Webserver with RDS backen with 2 public and 2 private subnets inside a vpc.",

  "Parameters" : {

    "StackType" : {
      "Type" : "String",
      "Description" : "Is this a production, stage, test, dev, or other environment",
      "AllowedValues" : [
        "PROD",
        "DEV",
        "TEST",
        "OTHER"
      ],
      "Default" : "PROD"
    },

    "ProjectName" : {
      "Type" : "String",
      "Description" : "To what project does this stack belong."
    },

    "CodeCommitRepositoryName" : {
      "Type" : "String",
      "Description" : "CodeCommit Repository name for CodeDeploy and CodePipeline"
    },

    "CertificateID" : {
      "Type" : "String",
      "Description" : "Public Certificate ID issued by Amazon Certificate Authority. Used to derive Arn for resource in the ELB.",
      "Default" : "e7ed81e2-1b05-4286-9fd6-9946e09c30c9"
    },

    "WebServerInstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "WebServerInstanceMonitoring" : {
      "Description" : "Detailed Monitoring (Default is False). Cost extra.",
      "Type" : "String",
      "Default" : "False",
      "AllowedValues" : [ "True", "False" ]
    },

    "MaxWebServerCount" : {
      "Type" : "Number",
      "Description" : "Max number of servers for auto scaling group for Web Server layer.",
      "Default" : "4"
    },

    "MinWebServerCount" : {
      "Type" : "Number",
      "Description" : "Minimum number of servers for auto scaling group for Web Server layer.",
      "Default" : "2"
    },

    "ScalingIncrement" : {
      "Type" : "Number",
      "Description" : "The number of servers you want added or removed based on demand.",
      "Default" : "1"
    },

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the bastion host",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },

    "RDSInstanceType" : {
      "Description" : "RDS instance type",
      "Type" : "String",
      "Default" : "db.t2.micro",
      "AllowedValues" : [ "db.t2.micro", "db.t2.small", "db.t2.medium", "db.t2.large", "db.m3.medium", "db.m3.large", "db.m4,large" ],
      "ConstraintDescription" : "must be a valid RDS instance type."
    },

    "RDSMultiAZOption" : {
      "Description" : "Launch failover databases in alternate AZ.",
      "Type" : "String",
      "Default" : "False",
      "AllowedValues" : [ "True", "False" ]
    },

    "RDSSnapshotName" : {
      "Description" : "RDS Snapshot to restore from for new stack (Optional). Provide RDS Snapshot Name or ARN.",
      "Type" : "String",
      "Default" : "",
    },

    "RDSServerStorage" : {
      "Type" : "String",
      "Description" : "Database storage amount in GB. Recommend at least 5 GBs.",
      "Default" : "5"
    },

    "DatabaseBackupRetentionPeriod" : {
      "Type" : "String",
      "Description" : "Number of days to keep a backup of the database.",
      "Default" : "12"
    },

    "DBName" : {
      "Type" : "String",
      "Description" : "What is the name of the database",
      "Default" : "FirstDB"
    },

    "DBUserName" : {
      "Type" : "String",
      "Description" : "What is the username for the database",
      "Default" : "FirstDBUser"
    },

    "DBPassword" : {
      "Type" : "String",
      "Description" : "What is the password for the database user",
      "Default" : "FirstDBUserPassword",
      "NoEcho" : "True"
    },

    "S3Repository" : {
      "Type" : "String",
      "Description" : "S3 bucket name for configuration, backup, etc. files.",
      "Default" : "nonexistantbucket"
    }
  },

  "Mappings" : {
    "SubnetConfig" : {
      "VPC"     : { "CIDR" : "10.0.0.0/16" },
      "WebServerSubnet1"  : { "CIDR" : "10.0.0.0/24" },
      "WebServerSubnet2"  : { "CIDR" : "10.0.1.0/24" },
      "RDSSubnet1"  : { "CIDR" : "10.0.2.0/24" },
      "RDSSubnet2"  : { "CIDR" : "10.0.3.0/24" }
    },

    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.nano"     : { "Arch" : "HVM64"  },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "t2.large"    : { "Arch" : "HVM64"  },
      "m1.small"    : { "Arch" : "PV64"   },
      "m1.medium"   : { "Arch" : "PV64"   },
      "m1.large"    : { "Arch" : "PV64"   },
      "m1.xlarge"   : { "Arch" : "PV64"   },
      "m2.xlarge"   : { "Arch" : "PV64"   },
      "m2.2xlarge"  : { "Arch" : "PV64"   },
      "m2.4xlarge"  : { "Arch" : "PV64"   },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.large"    : { "Arch" : "HVM64"  },
      "m4.xlarge"   : { "Arch" : "HVM64"  },
      "m4.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.4xlarge"  : { "Arch" : "HVM64"  },
      "m4.10xlarge" : { "Arch" : "HVM64"  },
      "c1.medium"   : { "Arch" : "PV64"   },
      "c1.xlarge"   : { "Arch" : "PV64"   },
      "c3.large"    : { "Arch" : "HVM64"  },
      "c3.xlarge"   : { "Arch" : "HVM64"  },
      "c3.2xlarge"  : { "Arch" : "HVM64"  },
      "c3.4xlarge"  : { "Arch" : "HVM64"  },
      "c3.8xlarge"  : { "Arch" : "HVM64"  },
      "c4.large"    : { "Arch" : "HVM64"  },
      "c4.xlarge"   : { "Arch" : "HVM64"  },
      "c4.2xlarge"  : { "Arch" : "HVM64"  },
      "c4.4xlarge"  : { "Arch" : "HVM64"  },
      "c4.8xlarge"  : { "Arch" : "HVM64"  },
      "g2.2xlarge"  : { "Arch" : "HVMG2"  },
      "g2.8xlarge"  : { "Arch" : "HVMG2"  },
      "r3.large"    : { "Arch" : "HVM64"  },
      "r3.xlarge"   : { "Arch" : "HVM64"  },
      "r3.2xlarge"  : { "Arch" : "HVM64"  },
      "r3.4xlarge"  : { "Arch" : "HVM64"  },
      "r3.8xlarge"  : { "Arch" : "HVM64"  },
      "i2.xlarge"   : { "Arch" : "HVM64"  },
      "i2.2xlarge"  : { "Arch" : "HVM64"  },
      "i2.4xlarge"  : { "Arch" : "HVM64"  },
      "i2.8xlarge"  : { "Arch" : "HVM64"  },
      "d2.xlarge"   : { "Arch" : "HVM64"  },
      "d2.2xlarge"  : { "Arch" : "HVM64"  },
      "d2.4xlarge"  : { "Arch" : "HVM64"  },
      "d2.8xlarge"  : { "Arch" : "HVM64"  },
      "hi1.4xlarge" : { "Arch" : "HVM64"  },
      "hs1.8xlarge" : { "Arch" : "HVM64"  },
      "cr1.8xlarge" : { "Arch" : "HVM64"  },
      "cc2.8xlarge" : { "Arch" : "HVM64"  }
    },

    "AWSInstanceType2NATArch" : {
      "t1.micro"    : { "Arch" : "NATPV64"   },
      "t2.nano"     : { "Arch" : "NATHVM64"  },
      "t2.micro"    : { "Arch" : "NATHVM64"  },
      "t2.small"    : { "Arch" : "NATHVM64"  },
      "t2.medium"   : { "Arch" : "NATHVM64"  },
      "t2.large"    : { "Arch" : "NATHVM64"  },
      "m1.small"    : { "Arch" : "NATPV64"   },
      "m1.medium"   : { "Arch" : "NATPV64"   },
      "m1.large"    : { "Arch" : "NATPV64"   },
      "m1.xlarge"   : { "Arch" : "NATPV64"   },
      "m2.xlarge"   : { "Arch" : "NATPV64"   },
      "m2.2xlarge"  : { "Arch" : "NATPV64"   },
      "m2.4xlarge"  : { "Arch" : "NATPV64"   },
      "m3.medium"   : { "Arch" : "NATHVM64"  },
      "m3.large"    : { "Arch" : "NATHVM64"  },
      "m3.xlarge"   : { "Arch" : "NATHVM64"  },
      "m3.2xlarge"  : { "Arch" : "NATHVM64"  },
      "m4.large"    : { "Arch" : "NATHVM64"  },
      "m4.xlarge"   : { "Arch" : "NATHVM64"  },
      "m4.2xlarge"  : { "Arch" : "NATHVM64"  },
      "m4.4xlarge"  : { "Arch" : "NATHVM64"  },
      "m4.10xlarge" : { "Arch" : "NATHVM64"  },
      "c1.medium"   : { "Arch" : "NATPV64"   },
      "c1.xlarge"   : { "Arch" : "NATPV64"   },
      "c3.large"    : { "Arch" : "NATHVM64"  },
      "c3.xlarge"   : { "Arch" : "NATHVM64"  },
      "c3.2xlarge"  : { "Arch" : "NATHVM64"  },
      "c3.4xlarge"  : { "Arch" : "NATHVM64"  },
      "c3.8xlarge"  : { "Arch" : "NATHVM64"  },
      "c4.large"    : { "Arch" : "NATHVM64"  },
      "c4.xlarge"   : { "Arch" : "NATHVM64"  },
      "c4.2xlarge"  : { "Arch" : "NATHVM64"  },
      "c4.4xlarge"  : { "Arch" : "NATHVM64"  },
      "c4.8xlarge"  : { "Arch" : "NATHVM64"  },
      "g2.2xlarge"  : { "Arch" : "NATHVMG2"  },
      "g2.8xlarge"  : { "Arch" : "NATHVMG2"  },
      "r3.large"    : { "Arch" : "NATHVM64"  },
      "r3.xlarge"   : { "Arch" : "NATHVM64"  },
      "r3.2xlarge"  : { "Arch" : "NATHVM64"  },
      "r3.4xlarge"  : { "Arch" : "NATHVM64"  },
      "r3.8xlarge"  : { "Arch" : "NATHVM64"  },
      "i2.xlarge"   : { "Arch" : "NATHVM64"  },
      "i2.2xlarge"  : { "Arch" : "NATHVM64"  },
      "i2.4xlarge"  : { "Arch" : "NATHVM64"  },
      "i2.8xlarge"  : { "Arch" : "NATHVM64"  },
      "d2.xlarge"   : { "Arch" : "NATHVM64"  },
      "d2.2xlarge"  : { "Arch" : "NATHVM64"  },
      "d2.4xlarge"  : { "Arch" : "NATHVM64"  },
      "d2.8xlarge"  : { "Arch" : "NATHVM64"  },
      "hi1.4xlarge" : { "Arch" : "NATHVM64"  },
      "hs1.8xlarge" : { "Arch" : "NATHVM64"  },
      "cr1.8xlarge" : { "Arch" : "NATHVM64"  },
      "cc2.8xlarge" : { "Arch" : "NATHVM64"  }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"        : {"PV64" : "ami-2a69aa47", "HVM64" : "ami-6869aa05", "HVMG2" : "ami-2e5e9c43"},
      "us-west-2"        : {"PV64" : "ami-7f77b31f", "HVM64" : "ami-7172b611", "HVMG2" : "ami-83b770e3"},
      "us-west-1"        : {"PV64" : "ami-a2490dc2", "HVM64" : "ami-31490d51", "HVMG2" : "ami-fd76329d"},
      "eu-west-1"        : {"PV64" : "ami-4cdd453f", "HVM64" : "ami-f9dd458a", "HVMG2" : "ami-b9bd25ca"},
      "eu-central-1"     : {"PV64" : "ami-6527cf0a", "HVM64" : "ami-ea26ce85", "HVMG2" : "ami-7f04ec10"},
      "ap-northeast-1"   : {"PV64" : "ami-3e42b65f", "HVM64" : "ami-374db956", "HVMG2" : "ami-e0ee1981"},
      "ap-northeast-2"   : {"PV64" : "NOT_SUPPORTED", "HVM64" : "ami-2b408b45", "HVMG2" : "NOT_SUPPORTED"},
      "ap-southeast-1"   : {"PV64" : "ami-df9e4cbc", "HVM64" : "ami-a59b49c6", "HVMG2" : "ami-0cb5676f"},
      "ap-southeast-2"   : {"PV64" : "ami-63351d00", "HVM64" : "ami-dc361ebf", "HVMG2" : "ami-a71c34c4"},
      "sa-east-1"        : {"PV64" : "ami-1ad34676", "HVM64" : "ami-6dd04501", "HVMG2" : "NOT_SUPPORTED"},
      "cn-north-1"       : {"PV64" : "ami-77559f1a", "HVM64" : "ami-8e6aa0e3", "HVMG2" : "NOT_SUPPORTED"}
    },

    "ELBPrinciple" : {
      "us-east-1" : { "AccountID" : "127311923021" },
      "us-west-1" : { "AccountID" : "027434742980" },
      "us-west-2" : { "AccountID" : "797873946194" },
      "eu-west-1" : { "AccountID" : "156460612806" },
      "eu-central-1" : { "AccountID" : "054676820928" },
      "ap-northeast-1" : { "AccountID" : "582318560864" },
      "ap-northeast-2" : { "AccountID" : "600734575887" },
      "ap-southeast-1" : { "AccountID" : "114774131450" },
      "ap-southeast-2" : { "AccountID" : "783225319266" },
      "ap-south-1" : { "AccountID" : "718504428378" },
      "sa-east-1" : { "AccountID" : "507241528517" }
    }
  },

  "Conditions" : {

    "UseRDSSnapshot" : { "Fn::Not" : [ { "Fn::Equals" : [ {"Ref" : "RDSSnapshotName" }, "" ] } ] } 

  },

  "Resources" : {

    "SQS" : {
       "Type" : "AWS::SQS::Queue",
       "Properties" : {
          "DelaySeconds": "0",
          "MaximumMessageSize": "262144",
          "MessageRetentionPeriod": "1209600",
          "QueueName": { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "SQS-Events" ] ] },
          "ReceiveMessageWaitTimeSeconds": "0",
          "VisibilityTimeout": "30"
       }
    },

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "VPC" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }      
        ]
      }
    },

    "VPCEndPoint" : {
      "Type" : "AWS::EC2::VPCEndpoint",
      "Properties" : {
        "PolicyDocument" : {
          "Statement": [
            {
              "Principal": "*",
              "Action": "*",
              "Effect": "Allow",
              "Resource": [ 
                { "Fn::Join" : [ "", [ "arn:aws:s3:::" , { "Ref" : "S3Bucket" }, "/*" ] ] },
                "arn:aws:s3:::packages.*.amazonaws.com/*",
                "arn:aws:s3:::repo.*.amazonaws.com/*" ,
                "arn:aws:s3:::codedeploydemobucket/*",
                "arn:aws:s3:::aws-cloudwatch/*",
                "arn:aws:s3:::aws-codedeploy-us-east-1/*",
                "arn:aws:s3:::aws-codedeploy-us-west-1/*",
                "arn:aws:s3:::aws-codedeploy-us-west-2/*",
                "arn:aws:s3:::aws-codedeploy-ap-northeast-1/*",
                "arn:aws:s3:::aws-codedeploy-ap-northeast-2/*",
                "arn:aws:s3:::aws-codedeploy-ap-south-1/*",
                "arn:aws:s3:::aws-codedeploy-ap-southeast-1/*",        
                "arn:aws:s3:::aws-codedeploy-ap-southeast-2/*",
                "arn:aws:s3:::aws-codedeploy-eu-central-1/*",
                "arn:aws:s3:::aws-codedeploy-eu-west-1/*",
                "arn:aws:s3:::aws-codedeploy-sa-east-1/*"
              ]
            }
          ]
        },
        "RouteTableIds" : [ { "Ref" : "PublicRouteTable" } ],
        "ServiceName" : { "Fn::Join": [ "", [ "com.amazonaws.", { "Ref": "AWS::Region" }, ".s3" ] ] },
        "VpcId" : { "Ref" : "VPC" }
      }
    },

    "WebServerSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
        "MapPublicIpOnLaunch" : "True",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "WebServerSubnet1", "CIDR" ]},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "WebServerSubnet1" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }  
        ]
      }
    },

    "WebServerSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone" : { "Fn::Select" : [ "2", { "Fn::GetAZs" : "" } ] },
        "MapPublicIpOnLaunch" : "True",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "WebServerSubnet2", "CIDR" ]},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "WebServerSubnet2" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }  
        ]
      }
    },

    "RDSSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "RDSSubnet1", "CIDR" ]},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "RDSSubnet1" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }  
        ]
      }
    },

    "RDSSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone" : { "Fn::Select" : [ "2", { "Fn::GetAZs" : "" } ] },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "RDSSubnet2", "CIDR" ]},
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "RDSSubnet2" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }  
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "IGW" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }  
        ]
      }
    },

    "GatewayToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "RouteTable" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }  
        ]
      }
    },   

    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "WebServerSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "WebServerSubnet1" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "WebServerSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "WebServerSubnet2" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },

    "WebServerNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "RouteTable-WebServer" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }  
        ]
      }
    },

    "InboundHTTPNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "WebServerNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "80", "To" : "80" }
      }
    },

    "InboundHTTPSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "WebServerNetworkAcl" },
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "443", "To" : "443" }
      }
    },

    "InboundSSHNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "WebServerNetworkAcl" },
        "RuleNumber" : "102",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "22", "To" : "22" }
      }
    },

    "InboundEphemeralNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "WebServerNetworkAcl" },
        "RuleNumber" : "103",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "1024", "To" : "65535" }
      }
    },

    "OutboundNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "WebServerNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "WebServerSubnet1NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "WebServerSubnet1" },
        "NetworkAclId" : { "Ref" : "WebServerNetworkAcl" }
      }
    },

    "WebServerSubnet2NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "WebServerSubnet2" },
        "NetworkAclId" : { "Ref" : "WebServerNetworkAcl" }
      }
    },

    "RDSNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "RouteTable-RDS" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }  
        ]
      }
    },

    "InboundRDSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "RDSNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
        "PortRange" : { "From" : "3306", "To" : "3306" }
      }
    },

    "OutboundRDSNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "RDSNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },

    "RDSSubnet1NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "RDSSubnet1" },
        "NetworkAclId" : { "Ref" : "RDSNetworkAcl" }
      }
    },

    "RDSSubnet2NetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "RDSSubnet2" },
        "NetworkAclId" : { "Ref" : "RDSNetworkAcl" }
      }
    },

    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable access to the EC2 host",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [ { 
          "IpProtocol" : "tcp",
          "FromPort" : "22",  
          "ToPort" : "22",
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "80",  
          "ToPort" : "80",
          "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "WebServerELBSecurityGroup", "GroupId" ] }    
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "443",  
          "ToPort" : "443",
          "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "WebServerELBSecurityGroup", "GroupId" ] }        
        } ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "SecurityGroup-HTTP-HTTPS-SSH" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }  
        ]
      }
    },

    "WebServerELBSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable access to the ELB",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "80",  
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"        
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "443",  
          "ToPort" : "443",
          "CidrIp" : "0.0.0.0/0"        
        } ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "SecurityGroup-HTTP-HTTPS" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }  
        ]
      }     
    },

    "RDSSubnetGroup" : {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Properties" : {
        "DBSubnetGroupDescription" : "description",
        "SubnetIds" : [ 
          { "Ref" : "RDSSubnet1" }, 
          { "Ref" : "RDSSubnet2" }
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "RDSSubnetGroup" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }  
        ]
      }
    },

    "RDSWebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn" : "WebServerSecurityGroup",
      "Properties" : {
        "GroupDescription": "Open database for access",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : "3306",
          "ToPort" : "3306",
          "SourceSecurityGroupId" : { "Ref" : "WebServerSecurityGroup" }
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "SecurityGroup-RDS" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }  
        ]
      }
    },

    "RDSInstance" : {
      "Type" : "AWS::RDS::DBInstance",
      "Properties" :
      {
        "AllocatedStorage" : { "Ref" : "RDSServerStorage" },
        "DBInstanceClass" : { "Ref" : "RDSInstanceType" },
        "DBInstanceIdentifier" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "RDS" ] ] },
        "DBName" : {
          "Fn::If" : [
            "UseRDSSnapshot",
            {"Ref" : "AWS::NoValue" },
            { "Ref" : "DBName" }
          ]
        },
        "DBSubnetGroupName" : { "Ref" : "RDSSubnetGroup" },
        "BackupRetentionPeriod" : { "Ref" : "DatabaseBackupRetentionPeriod"},
        "PreferredBackupWindow" : "06:00-06:30",
        "PreferredMaintenanceWindow" : "Sun:07:00-Sun:07:30",
        "DBSnapshotIdentifier" : {
          "Fn::If" : [
            "UseRDSSnapshot",
            {"Ref" : "RDSSnapshotName"},
            {"Ref" : "AWS::NoValue"}
          ]
        },
        "Engine" : "MySQL",
        "EngineVersion" : "5.6.27",
        "MasterUsername" : {
          "Fn::If" : [ 
            "UseRDSSnapshot",
            { "Ref" : "AWS::NoValue" },
            { "Ref" : "DBUserName" }
          ]
        },
        "MasterUserPassword" : {
          "Fn::If" : [
            "UseRDSSnapshot",
            { "Ref" : "AWS::NoValue" },
            { "Ref" : "DBPassword" },
          ]
        },
        "MultiAZ" : { "Ref" : "RDSMultiAZOption" },
        "PubliclyAccessible" : "False",
        "StorageEncrypted" : "True",
        "StorageType" : "gp2",
        "VPCSecurityGroups" : [ { "Ref" : "RDSWebServerSecurityGroup" }],
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "RDS" ] ] } },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }  
        ]
      }
    },

    "WebServerELB" : {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn" : "RDSInstance",
        "Properties": {
          "CrossZone" : "True",
          "AccessLoggingPolicy" : {
            "EmitInterval" : "60",
            "Enabled" : "True",
            "S3BucketName" : { "Ref" : "S3Bucket" },
            "S3BucketPrefix" : "ELB/Logs"
          },
          "ConnectionDrainingPolicy" : {
            "Enabled" : "True",
            "Timeout" : "60"
          },
          "HealthCheck" : {
            "Target" : {
              "Fn::Join" : [ "", [ "HTTP:", "80", "/health-check.html" ] ]
            },
            "HealthyThreshold" : "4",
            "UnhealthyThreshold" : "10",
            "Interval" : "60",
            "Timeout" : "5"
          },
          "LoadBalancerName" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "ELB" ] ] },
          "Listeners" : [ 
          {
            "LoadBalancerPort" : "80",
            "InstancePort" : "80",
            "Protocol" : "HTTP"
          },
          {
            "LoadBalancerPort" : "443",
            "InstancePort" : "443",
            "Protocol" : "HTTPS",
            "InstanceProtocol" : "HTTPS",
            "SSLCertificateId" : { "Fn::Join" : [ "", 
              [ 
                "arn:aws:acm:", 
                { "Ref" : "AWS::Region" },
                ":",
                { "Ref" : "AWS::AccountId"},
                ":certificate/",
                { "Ref" : "CertificateID" } 
              ] ] }
          } ],
          "Scheme" : "internet-facing",
          "Subnets" : [ { "Ref" : "WebServerSubnet1" }, { "Ref" : "WebServerSubnet2" }  ],
          "SecurityGroups" : [ { "Ref" : "WebServerELBSecurityGroup" } ],
          "Tags" : [ 
              { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "ELB-WebServers" ] ] } },
              { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
              { "Key" : "StackType", "Value" : { "Ref" : "StackType" } } ]
        }
    },

    "WebServerAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "Cooldown" : "500",
        "DesiredCapacity" : { "Ref" : "MinWebServerCount" },
        "HealthCheckGracePeriod" : "500",
        "HealthCheckType" : "ELB",
        "LaunchConfigurationName" : { "Ref" : "WebServerAutoScalingLaunchConfiguration" },
        "LoadBalancerNames" : [ { "Ref" : "WebServerELB" } ],
        "MaxSize" : { "Ref" : "MaxWebServerCount" },
        "MinSize" : { "Ref" : "MinWebServerCount" },
        "VPCZoneIdentifier" : [ { "Ref" : "WebServerSubnet1" }, { "Ref" : "WebServerSubnet2"} ],
        "Tags" : [ 
          { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "AutoScalingGroup-WebServer" ] ] }, "PropagateAtLaunch" : "true" },
          { "Key" : "Project", "Value" : { "Ref" : "ProjectName" }, "PropagateAtLaunch" : "true" },
          { "Key" : "StackType", "Value" : { "Ref" : "StackType" }, "PropagateAtLaunch" : "true" }
        ]
      }
    },

    "WebServerAutoScalingLaunchConfiguration" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn" : [ "GatewayToInternet", "WebServerSecurityGroup", "RDSInstance", "EC2InstanceProfile", "SQS" ],
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "httpd" : [],
                "mod_ssl" : [],
                "mysql" : [],
                "php" : [],
                "php-mysql" : [],
                "php-mbstring" : [],
                "ruby" : [],
                "wget" : []
              }
            },
            "files" : {
              "/tmp/health-check.html" : {
                  "content" : { "Fn::Join" : ["", [
                  "<html>\n",
                  " <title>ELB Health-Check</title>\n",
                  " <body>AWS ELB Health-Check Page</body>\n",
                  "</html>\n"
                ] ] },
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/home/ec2-user/database-credentials.txt" : {
                  "content" : { "Fn::Join" : ["", [
                  { "Fn::GetAtt" : [ "RDSInstance", "Endpoint.Address" ] }, "\n",
                  { "Ref" : "DBName" } , "\n",
                  { "Ref" : "DBUserName" }, "\n",
                  { "Ref" : "DBPassword" }, "\n"
                ] ] },
                "mode"  : "000600",
                "owner" : "root",
                "group" : "root"
              },
              "/home/ec2-user/CloudWatch-Logs-Config.cfg" : {
                  "content" : { "Fn::Join" : ["", [
                  "[general]\n",
                  "state_file = /var/awslogs/state/agent-state\n\n",
                  
                  "[CodeDeploy-Logs]\n",
                  "file = /var/log/aws/codedeploy-agent/codedeploy-agent.log\n",
                  { "Fn::Join" : [ "", [ "log_group_name = ", { "Ref" : "ProjectName" }, "/", { "Ref" : "StackType"}, "WebServer\n" ] ] },
                  "log_stream_name = {instance_id}/CodeDeploy-Agent-Logs\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S\n",
                  "time_zone = UTC\n\n",

                  "[Cloud-Init-Output]\n",
                  "file = /var/log/cloud-init-output.log\n",
                  { "Fn::Join" : [ "", [ "log_group_name = ", { "Ref" : "ProjectName" }, "/", { "Ref" : "StackType"}, "WebServer\n" ] ] },
                  "log_stream_name = {instance_id}/Cloud-Init-Output-Logs\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S\n",
                  "time_zone = UTC\n\n",

                  "[Cfn-Init-Cmd]\n",
                  "file = /var/log/cfn-init-cmd.log\n",
                  { "Fn::Join" : [ "", [ "log_group_name = ", { "Ref" : "ProjectName" }, "/", { "Ref" : "StackType"}, "WebServer\n" ] ] },
                  "log_stream_name = {instance_id}/Cfn-Init-Cmd-Logs\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S %f\n",
                  "time_zone = UTC\n\n",

                  "[HTTP-Access]\n",
                  "file = /var/log/httpd/access_log\n",
                  { "Fn::Join" : [ "", [ "log_group_name = ", { "Ref" : "ProjectName" }, "/", { "Ref" : "StackType"}, "WebServer\n" ] ] },
                  "log_stream_name = {instance_id}/Httpd-Access-Logs\n",
                  "datetime_format = %d/%b/%Y:%H:%M:%S\n",
                  "time_zone = UTC\n\n",

                  "[HTTP-Error]\n",
                  "file = /var/log/httpd/error_log\n",
                  { "Fn::Join" : [ "", [ "log_group_name = ", { "Ref" : "ProjectName" }, "/", { "Ref" : "StackType"}, "WebServer\n" ] ] },
                  "log_stream_name = {instance_id}/Httpd-Error-Logs\n",
                  "datetime_format = %b %d %H:%M:%S %Y\n",
                  "time_zone = UTC\n\n",

                  "[Cron]\n",
                  "file = /var/log/cron\n",
                  { "Fn::Join" : [ "", [ "log_group_name = ", { "Ref" : "ProjectName" }, "/", { "Ref" : "StackType"}, "WebServer\n" ] ] },
                  "log_stream_name = {instance_id}/Cron-Logs\n",
                  "datetime_format = %b %d %H:%M:%S\n",
                  "time_zone = UTC\n\n",

                  "[Secure]\n",
                  "file = /var/log/secure\n",
                  { "Fn::Join" : [ "", [ "log_group_name = ", { "Ref" : "ProjectName" }, "/", { "Ref" : "StackType"}, "WebServer\n" ] ] },
                  "log_stream_name = {instance_id}/Secure-Logs\n",
                  "datetime_format = %b %d %H:%M:%S\n",
                  "time_zone = UTC\n\n"
                ] ] },
                "mode"  : "000600",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "httpd" : {
                "enabled" : "true",
                "ensureRunning" : "true"
              }
            }
          }
        }
      },
      "Properties" : {
        "AssociatePublicIpAddress" : "True",
        "EbsOptimized" : "False",
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, 
                     { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "WebServerInstanceType" }, "Arch" ] } ] },
        "InstanceMonitoring" : { "Ref" : "WebServerInstanceMonitoring" },
        "InstanceType" : { "Ref" : "WebServerInstanceType" },
        "IamInstanceProfile" : { "Fn::GetAtt" : [ "EC2InstanceProfile", "Arn"] },
        "KeyName" : { "Ref" : "KeyName" },
        "SecurityGroups" : [ { "Ref" : "WebServerSecurityGroup" } ],
        "UserData" : { 
          "Fn::Base64" : { 
            "Fn::Join" : ["", [
              "#!/bin/bash -v\n",
              "aws configure set default.region ", { "Ref" : "AWS::Region" }, " \n",
              "aws sqs send-message --queue-url ", { "Ref" : "SQS" }, " --message-body 'EC2 Configuration Started.'\n",
              "yum update -y aws-cfn-bootstrap\n",

              "/opt/aws/bin/cfn-init --stack ", { "Ref" : "AWS::StackName" }, " --resource WebServerAutoScalingLaunchConfiguration --region ", { "Ref" : "AWS::Region" }, "\n",

              "cd /home/ec2-user\n",
              "curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O\n",
              "chmod +x /home/ec2-user/awslogs-agent-setup.py\n",
              { "Fn::Join" : [ "", [ "/home/ec2-user/awslogs-agent-setup.py -n -r ", { "Ref" : "AWS::Region" }, " -c /home/ec2-user/CloudWatch-Logs-Config.cfg\n" ] ] },
              "chkconfig awslogs on\n",
              "service awslogs restart\n",

              { "Fn::Join" : [ "", [ "wget https://aws-codedeploy-", { "Ref" : "AWS::Region" }, ".s3.amazonaws.com/latest/install\n" ] ] },
              "chmod +x /home/ec2-user/install\n",
              "/home/ec2-user/install auto\n",
              "chkconfig codedeploy-agent on\n",
              "service codedeploy-agent start\n",

              "mv /tmp/health-check.html /var/www/html/\n",
              "chkconfig httpd on\n",
              "service httpd restart\n",
              "aws sqs send-message --queue-url ", { "Ref" : "SQS" }, " --message-body 'EC2 Configuration Completed.'\n"
            ] ]
          }
        }
      }
    },

    "WebServerAutoScalingScaleUpPolicy" : {
        "Type" : "AWS::AutoScaling::ScalingPolicy",
        "DependsOn" : "WebServerAutoScalingLaunchConfiguration",
        "Properties" : {
           "AdjustmentType" : "ChangeInCapacity",
           "AutoScalingGroupName" : { "Ref" : "WebServerAutoScalingGroup" },
           "Cooldown" : "300",
           "PolicyType" : "SimpleScaling",
           "ScalingAdjustment" : { "Ref" : "ScalingIncrement" }
        }
     },

     "WebServerAutoScalingScaleDownPolicy" : {
        "Type" : "AWS::AutoScaling::ScalingPolicy",
        "DependsOn" : "WebServerAutoScalingLaunchConfiguration",
        "Properties" : {
           "AdjustmentType" : "ChangeInCapacity",
           "AutoScalingGroupName" : { "Ref" : "WebServerAutoScalingGroup" },
           "Cooldown" : "300",
           "PolicyType" : "SimpleScaling",
           "ScalingAdjustment" : { "Fn::Join" : [ "" , [ "-", { "Ref" : "ScalingIncrement" } ] ] }
        }
     },

     "WebServerAutoScalingCPUHighAlarm" : {
         "Type" : "AWS::CloudWatch::Alarm",
         "DependsOn" : "WebServerAutoScalingLaunchConfiguration",
         "Properties" : {
            "ActionsEnabled" : "True",
            "AlarmActions" : [ { "Ref" : "WebServerAutoScalingScaleUpPolicy" } ],
            "AlarmDescription" : "Alarm to trigger a scale up event on the scaling group when CPU gets to high.",
            "AlarmName" : { "Fn::Join" : [ "-" , [ { "Ref" : "WebServerAutoScalingScaleUpPolicy" }, "Alarm"] ] },
            "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
            "Dimensions" : [ 
              { 
                "Name" : "AutoScalingGroupName",
                "Value" : { "Ref" : "WebServerAutoScalingGroup" }
              } 
            ],
            "EvaluationPeriods" : "5",
            "MetricName" : "CPUUtilization",
            "Namespace" : "AWS/EC2",
            "Period" : "300",
            "Statistic" : "Average",
            "Threshold" : "80",
            "Unit" : "Percent"
         }
      },

      "WebServerAutoScalingCPUNormalAlarm" : {
         "Type" : "AWS::CloudWatch::Alarm",
         "DependsOn" : "WebServerAutoScalingLaunchConfiguration",
         "Properties" : {
            "ActionsEnabled" : "True",
            "AlarmActions" : [ { "Ref" : "WebServerAutoScalingScaleDownPolicy" } ],
            "AlarmDescription" : "Alarm to trigger a scale up event on the scaling group when CPU gets to high.",
            "AlarmName" : { "Fn::Join" : [ "-" , [ { "Ref" : "WebServerAutoScalingScaleDownPolicy"}, "Alarm"] ] },
            "ComparisonOperator" : "LessThanOrEqualToThreshold",
            "Dimensions" : [ 
              { 
                "Name" : "AutoScalingGroupName",
                "Value" : { "Ref" : "WebServerAutoScalingGroup" }
              } 
            ],
            "EvaluationPeriods" : "5",
            "MetricName" : "CPUUtilization",
            "Namespace" : "AWS/EC2",
            "Period" : "600",
            "Statistic" : "Average",
            "Threshold" : "60",
            "Unit" : "Percent"
         }
      },

      "WebServerCodeDeployApplication":{
        "Type" : "AWS::CodeDeploy::Application",
        "DependsOn" : "WebServerAutoScalingLaunchConfiguration",
        "Properties" : {
          "ApplicationName" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" } ] ] }
        }
      },

      "WebServerCodeDeployDeploymentGroup" : {
        "Type" : "AWS::CodeDeploy::DeploymentGroup",
        "DependsOn" : "WebServerCodeDeployApplication",
        "Properties" : {
          "ApplicationName" : { "Ref" : "WebServerCodeDeployApplication" },
          "AutoScalingGroups" : [ { "Ref" : "WebServerAutoScalingGroup" } ],
          "DeploymentGroupName" :  { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "Deployment-Group"] ] },
          "ServiceRoleArn": { "Fn::Join" : [ "", [ "arn:aws:iam::", { "Ref" : "AWS::AccountId" }, ":role/", { "Ref" : "CodeDeployTrustRole" } ]]}
        }
      },

      "S3Bucket" : {
        "Type" : "AWS::S3::Bucket",
        "Properties" : {
          "Tags" : [
            { "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "AutoScalingGroup-WebServers" ] ] } },
            { "Key" : "Project", "Value" : { "Ref" : "ProjectName" } },
            { "Key" : "StackType", "Value" : { "Ref" : "StackType" } }         
          ]
        }
      },

      "S3BucketPolicy" : {
         "Type" : "AWS::S3::BucketPolicy",
         "Properties" : {
            "Bucket" : { "Ref" : "S3Bucket" },
            "PolicyDocument" : {
              "Version": "2012-10-17",
              "Id": "Policy1475025065271",
              "Statement": [
                {
                  "Sid": "Stmt1475025063221",
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": { "Fn::Join" : [ "", [ "arn:aws:iam::", { "Fn::FindInMap" : [ "ELBPrinciple", { "Ref" : "AWS::Region" }, "AccountID" ] }, ":root" ] ] }
                  },
                  "Action": "s3:PutObject",
                  "Resource": { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3Bucket" }, "/*" ] ] }
                }
              ]
            }
         }
      }, 


      "WebServerCodePipeline" : {
        "Type" : "AWS::CodePipeline::Pipeline",
        "DependsOn" : ["WebServerAutoScalingLaunchConfiguration", "WebServerCodePipelineRole", "S3Bucket"],
        "Properties" : {
          "ArtifactStore" : {
            "Location" : { "Ref" : "S3Bucket" },
            "Type" : "S3"
          },
          "Name" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "CodePipeline" ] ] }, 
          "RestartExecutionOnUpdate" : "True",
          "RoleArn" : { "Fn::Join" : [ "", [ "arn:aws:iam::" , { "Ref" : "AWS::AccountId" }, ":role/", { "Ref" : "WebServerCodePipelineRole" } ] ] },
          "Stages" : [ 
            {
              "Name" :  { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "Source" ] ] },
              "Actions" : [ 
                {
                  "ActionTypeId" : {
                      "Category" : "Source",
                      "Owner" : "AWS",
                      "Provider" : "CodeCommit",
                      "Version" : "1"
                  },
                  "Configuration" : {
                    "BranchName" : "master",
                    "RepositoryName" : { "Ref" : "CodeCommitRepositoryName" }
                  },
                  "Name" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "Source-Stage-Action" ] ] },
                  "OutputArtifacts" : [ 
                    {
                      "Name" : "MyApp"
                    }
                  ],
                  "RunOrder" : "1"
                }
              ]
            },
            {
              "Name" :  { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "Deploy" ] ] },
              "Actions" : [ 
                {
                  "ActionTypeId" : {
                      "Category" : "Deploy",
                      "Owner" : "AWS",
                      "Provider" : "CodeDeploy",
                      "Version" : "1"
                  },
                  "Configuration" : {
                    "ApplicationName" : { "Ref" : "WebServerCodeDeployApplication" },
                    "DeploymentGroupName" : { "Ref" : "WebServerCodeDeployDeploymentGroup" }
                  },
                  "Name" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, { "Ref" : "StackType" }, "Deploy-Stage-Action" ] ] },
                  "InputArtifacts" : [
                    { 
                      "Name" : "MyApp" 
                    }
                  ],
                  "RunOrder" : "1"
                }
              ]
            }
          ]
        }
      },

      "WebServerCodePipelineRole" : {
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "codepipeline.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"codepipeline-service",
            "PolicyDocument":{
              "Statement":[
                {
                  "Action":[
                    "codecommit:GetBranch",
                    "codecommit:GetCommit",
                    "codecommit:UploadArchive",
                    "codecommit:GetUploadArchiveStatus",
                    "codecommit:CancelUploadArchive"
                  ],
                  "Resource":"*",
                  "Effect":"Allow"
                },
                {
                  "Action":[
                    "s3:GetObject",
                    "s3:GetObjectVersion",
                    "s3:GetBucketVersioning"
                  ],
                  "Resource": { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3Bucket" }, "/*" ] ]},
                  "Effect":"Allow"
                },
                {
                  "Action":[
                    "s3:PutObject"
                  ],
                  "Resource":[
                    { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3Bucket" }, "/*" ] ]}
                  ],
                  "Effect":"Allow"
                },
                {
                  "Action":[
                    "codedeploy:CreateDeployment",
                    "codedeploy:GetApplicationRevision",
                    "codedeploy:GetDeployment",
                    "codedeploy:GetDeploymentConfig",
                    "codedeploy:RegisterApplicationRevision"
                  ],
                  "Resource":"*",
                  "Effect":"Allow"
                },
                {
                  "Action":[
                    "elasticbeanstalk:*",
                    "ec2:*",
                    "elasticloadbalancing:*",
                    "autoscaling:*",
                    "cloudwatch:*",
                    "s3:*",
                    "sns:*",
                    "cloudformation:*",
                    "rds:*",
                    "sqs:*",
                    "ecs:*",
                    "iam:PassRole"
                  ],
                  "Resource":"*",
                  "Effect":"Allow"
                },
                {
                  "Action":[
                    "lambda:InvokeFunction",
                    "lambda:ListFunctions"
                  ],
                  "Resource":"*",
                  "Effect":"Allow"
                }
              ],
              "Version":"2012-10-17"
            }
          }
        ] }
      },

      "CodeDeployTrustRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Sid": "1",
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    { "Fn::Join" : [ "", [ "codedeploy.", { "Ref" : "AWS::Region" }, ".amazonaws.com" ] ] }
                  ]
                },
                "Action": "sts:AssumeRole"
              }
            ]
          },
          "Path": "/"
        }
      },

      "CodeDeployRolePolicies": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
          "PolicyName": "CodeDeployPolicy",
          "PolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Resource": [
                  "*"
                ],
                "Action": [
                  "ec2:Describe*"
                ]
              },
              {
                "Effect": "Allow",
                "Resource": [
                  "*"
                ],
                "Action": [
                  "autoscaling:CompleteLifecycleAction",
                  "autoscaling:DeleteLifecycleHook",
                  "autoscaling:DescribeLifecycleHooks",
                  "autoscaling:DescribeAutoScalingGroups",
                  "autoscaling:PutLifecycleHook",
                  "autoscaling:RecordLifecycleActionHeartbeat"
                ]
              }
            ]
          },
          "Roles": [
            {
              "Ref": "CodeDeployTrustRole"
            }
          ]
        }
      },

      "EC2InstanceProfile" : {
        "Type": "AWS::IAM::InstanceProfile",
        "DependsOn" : "EC2InstanceRole",
        "Properties": {
          "Path": "/",
          "Roles": [ { "Ref" : "EC2InstanceRole" } ]
        }
      },      

      "EC2InstanceRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "ec2.amazonaws.com"
                  ]
                },
                "Action": [
                  "sts:AssumeRole"
                ]
              }
            ]
          },
          "Path": "/"
        }
      },

      "EC2InstanceRolePolicies": {
        "Type": "AWS::IAM::Policy",
        "DependsOn" : [ "EC2InstanceRole", "S3Bucket" ],
        "Properties": {
          "PolicyName": "EC2InstanceRolePolicy",
          "PolicyDocument": {
            "Statement": [
              {
                "Action": "ec2:*",
                "Effect": "Allow",
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": "elasticloadbalancing:*",
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": "cloudwatch:*",
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": "autoscaling:*",
                "Resource": "*"
              },
              {
                "Effect": "Allow",
                "Action": "s3:*",
                "Resource": { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3Bucket" }, "/*" ]]}
              },
              {
                "Effect": "Allow",
                "Action": [
                    "s3:GetObject",
                    "s3:GetObjectAcl",
                    "s3:GetObjectVersion"
                ],
                "Resource": { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3Repository" }, "/*" ]]}
              },
              {
                "Effect": "Allow",
                "Action": [
                    "sqs:SendMessage",
                    "sqs:SendMessageBatch"
                ],
                "Resource" : { "Fn::GetAtt" : [ "SQS", "Arn" ] }
              },
              {
                "Effect": "Allow",
                "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams"
                ],
                "Resource": [
                    "arn:aws:logs:*:*:*"
                ]
              }
            ]
          },
          "Roles" : [
            {
              "Ref" : "EC2InstanceRole"
            }
          ]
        }
      }
  }, 

  "Outputs" : {
    "BuildMessage" : {
      "Description" : "Follow-up information for admins.",
      "Value" : "Once complete with full configuration remove SSH access from EC2 security group and block port 22 using the NACL."
    },
    "VPCId" : {
      "Description" : "VPCId of the newly created VPC",
      "Value" :  { "Ref" : "VPC" }
    },
    "DNSName" : {
      "Description" : "DNS Hostname for ELB.",
      "Value" : { "Fn::GetAtt" : [ "WebServerELB", "DNSName"] }
    },
    "RDSHostName" : {
      "Description" : "DNS Name for RDS host",
      "Value" : { "Fn::GetAtt" : [ "RDSInstance", "Endpoint.Address" ] }
    },
    "DBUserName" : {
      "Description" : "RDS Database Username.",
      "Value" : { "Ref" : "DBUserName" }
    },
    "DBPassword" : {
      "Description" : "RDS Database Password.",
      "Value" : { "Ref" : "DBPassword" }
    },
    "S3BucketName" : {
      "Description" : "Cloud Stack Temporary S3 Bucket",
      "Value" : { "Ref" : "S3Bucket" }
    },
    "ACMCertificateArn" : {
      "Description" : "Arn for ELB's assigned ACM certificate.",
      "Value" : { "Fn::Join" : [ "", 
          [ 
            "arn:aws:acm:", 
            { "Ref" : "AWS::Region" },
            ":",
            { "Ref" : "AWS::AccountId"},
            ":certificate/",
            { "Ref" : "CertificateID" } 
          ] ] }
    }
  }
}
